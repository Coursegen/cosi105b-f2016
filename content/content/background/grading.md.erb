---
title: Grading
---
#### Scores
There are many expections, homeworks, assigments and/or quizes, and a several large ones. All of them are individually scored on a scale of 1-100 which you can interpret as follows:

* 90 - 100: Exceeds Expectations (A- -> A+)
* 80 - 90: Meets Expectations (B- -> B+)
* 70 - 80: Needs Improvement (C- -> C+)
* 60 - 70: Unacceptable (D- -> D+)
*      40: Not handed in

#### Deadlines and consequences
* All homework is due by when the class starts
* Homeworks are scored on a 1-100 scale
* You can get an extension by talking to the TA, up to a point
* If you hand it in after a granted extension you will loose 15 points on it
* If you don't hand it in at all then you get 40 points for it, which will significantly affect the average!

#### Grade Calculations

These are calculated as a weighted average of the individual homeworks. The weights are as follows:

* **Class Participation:** 10%
  * Do you regularly submit the "Warmup Quizes" by 8am on the day of class?
  * Do you show up on time (or let the teachers know ahead of time if you cannot?)
  * Do you ask good questions, and contribute to the discussion?
  * Do you help the class move forward and stay focused?
  * When called on or in discussions do you demonstrate that you have done the assigned reading or work?
  * Do you keep up with the homework?

* **Programming Assignments**: 30%
  * Submitted programming assignments will be graded based on criteria:
    * Do the programs work?
    * Does it use language features in a good way?
    * Is it designed with good performance in mind?
    * Does it follow good coding practices?

* **Team nT Implementation:** 30%
  * This applies to the team coded implementation, in Git:
    * Did all the specified functionalities get implemented
    * How complete are unit tests and are they being run regularly
    * Does the code reflect good coding practices
    * Is there good Object oriented design
    * How well does nT scale. How do you know.
    * What Scaling techniques are applied
    * How well do you understand the performance that you measured?
    * What aspects of the product did you contribute to?
    * How professional and attractive is UI, how is the fit and finish?
    * How narrowly did you read the requirements, or did you go beyond them?
    * Can you explain how it works?

* **Contribution to the team:** 15%
  * Do you contribute personally to your team?
  * Are you a positive influence on productivity?
  * Do your team mates like working with you?
  * Are you at the center of problems or of solutions?
  * This is based on a self- and peer- assessment

* **Non programming assignments:** 15%
  * Don't just summarize or regurgitate the reading
  * Give a personal perspective or insight
  * Make connections to other readings or work or your own research
  * Have an interesting take or point of view


#### Notes

* **Warmup Quizes**: Are always graded by simple participation. You will get 100 if you do them (whether or not you get the right answer!), and zero if you don't. These are quizes that are given to you via Latte, and are due by 8am on the day of class. Late submissions are not accepted. 

* **Class Participation:** includes being in class on time when the class starts, handing in homeworks that are assigned, being prepared by having done the reading, coding, viewing assigned so that when you are called on in class you can have something to say.

* **Team Contribution:** Working in teams is hard and requires a businesslike, constructive, flexible, respectful behavior among the team members. Remember that I am not asking you to become best friends, just to figure out how to get the most out of each other. We use peer and self assessmentws, because by myself I won't be able to tell if you are just along for the ride, or actually doing a lot of work.
