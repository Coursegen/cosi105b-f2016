---
title: Intro to Web Services
desc: How to think about Web Services API designs and documentation
homework: 1) Read about REST; 2) Based on reading about routes in nanoTwitter, submit API documentation; 3) Continue working on nT 0.2
---
<%= homework_hdr %>
1. Read these article. It's long but important: [Best Practices for Designing a Pragmatic RESTful API](http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api). <%= deliverable "Locate and respond to the warmups in Latte" %>
1. Examine the routes that were proposed in <%= link_to_section :nt, :nt_functionality %> for nT and evaluate them in the context of this reading. You're welcome to improve them so they follow more pragmatic REST principles. Now, write "API Documentation" for the nanoTwitter service api. Look for examples on the web for how web APIs are documented for what you think is a good format. Remember that you have to state the url's "syntax" and the format of the input and output data (JSON). Your documentation should be good enough for a programmer who doesn't know anything about your app to properly access the API.
  <%= team_deliverable "PDF with the API documentation." %>
1. nanoTwitter implementation: Teams begin working on nanoTwitter 0.2 in your portfolios, completing at least \[MIGRATIONS\] and \[AUTHENTICATION\]. See: <%= link_to_section :nt, :nt_outline %>.

#### Questionnaire
* [Longitudinal survey](https://docs.google.com/forms/d/1IgTI8pRozcqbBDOaQXWWT5txaUyNnNDDyNR78ZP4xpw/viewform)
* 3x5 questions: Bullet Feedback about the course

#### Discussion
* Think about this, then talk to your neighbor, write down answers:
  * What are some of the reasons why a product (like Facebook) would be divided up into "services"? Doing this is sometimes called a service oriented architecture. What is a service? What are some of the motivations for dividing a product into a set of services?
  * HTTP is a protocol used when one computer (the client) has to make a request of another computer (the server). The client makes a request, and the server responds to that request. What are the key parts or elements in the request? What are the key parts of building blocks of the response?

#### Where we left off
* <%= link_to_topic :architecting_for_scale %>, at "If App/Web server seem to be a Problem"

<%= include_topic :rest_web_services %>

#### Next Class
* Look at homework: <%= link_to_next_lecture %>
