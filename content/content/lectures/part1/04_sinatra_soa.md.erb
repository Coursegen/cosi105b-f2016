---
title: Sinatra and the SOA
desc: Sinatra and Service Oriented Architectures
homework:
cat: web
---

<%= homework_hdr %>

* **Read:** Study Service Oriented Design in Ruby and Rails \[SODDR\] Chapter 1, as you watch this video. In the video I narrate and demonstrate the actual coding that is done in that chapter, and and follow along the reading by watching me do the coding from that chapter. I narrate lots of conceptual clarifications and details.

  <iframe width="400" height="225" src="https://www.youtube.com/embed/zPaG-g-d6sY?rel=0&amp;showinfo=0" frameborder="0" allowfullscreen></iframe>

* <%= timebadge %> <%= partbadge %> **Warmups:** Do the warmup questions in Latte. This chapter builds on the basics we covered at the last lecture. It covers much of the same ground as the last tutorial, but goes a little further. <%= deliverable "Answer warmup questions in Latte" %>

* **Code**: <%= codebadge %> <%= partbadge %> Now, actually implement the code in \[SODRR\] Chapter 1 and get it to work! **Important**: Please attend to these specific details!
  * Attempt to get the code to work, **but importantly, stop when you get to "Implementing the client library".**
  * Do coding on your own computer in your <%= link_to_intro :portfolio %> in a new top level directory called `user-service`
  * Because the book is a couple of years old, there are some changes you need to keep in mind in order to get it to work on your own computer. They are all mentioned in the video but here they are again:
    1. gem is called `active_record` (not activerecord)
    1. No need to require 'rubygems' anymore (since Ruby 2.0)
    1. The first few lines of service_spec.rb change a lot. [Click here to see a working example](https://raw.githubusercontent.com/Cosi-105/sotl-user-service/master/spec/service_spec.rb)

#### Homework Discussion
* Let's review the user-service.rb and related files to talk again about what they do.

#### Review
1. What a web server is and how Sinatra helps you create one
1. Meaning of the URL
1. ActiveRecord as the bridge between Ruby and the relational database
1. The relationship between the client and the server
1. How Unit testing is done with Rspec
1. The idea of Test Driven Development
1. HTTP and it's different Verbs like GET, PUT, POST etc.

#### Next Class
* Look at homework: <%= link_to_next_lecture %>
