---
title: Introduction to Sinatra
desc: A very lightweight Ruby based web server
homework: 1) Do the schema design exercise; 2) Study in depth [SODRR] Chapter 2, and submit warmup exercises
cat: web
---
<%= homework_hdr %>
* **Read:** Study Service Oriented Design in Ruby and Rails \[SODDR\] Chapter 1, as you watch this video. In the video I narrate and demonstrate the actual coding that is done in that chapter. I narrate lots of conceptual clarifications and details.

  <iframe width="400" height="225" src="https://www.youtube.com/embed/zPaG-g-d6sY?rel=0&amp;showinfo=0" frameborder="0" allowfullscreen></iframe>

* **Code**: <%= codebadge %> <%= partbadge %> Now, actually implement the code in \[SODRR\] Chapter 1 and get it to work! **Important**: Please attend to these specific details!
  * Attempt to get the code to work, **but importantly, stop when you get to "Implementing the client library".**
  * Do coding on your own computer in your <%= link_to_intro :portfolio %> in a new top level directory called `user-service`
  * Because the book is a couple of years old, there are some changes you need to keep in mind in order to get it to work on your own computer. They are all mentioned in the video but here they are again:
    1. gem is called `active_record` (not activerecord)
    1. No need to require 'rubygems' anymore (since Ruby 2.0)
    1. The first few lines of service_spec.rb change a lot. [Click here to see a working example](https://raw.githubusercontent.com/Cosi-105/sotl-user-service/master/spec/service_spec.rb)
  * <%= deliverable "Working code in your portfolio" %>


#### Homework
* Discuss building teams for projects?
* Homwork structure - coding from book?
* Discuss concepts you learned
* Quick review of web client / server relationship (http/url/html/json)

#### What is a web service and an SOA?
  * A web server is now used not just as a place that has web pages for people to read, but as a place that delivers a service (functionality, data, information) to other programs, without human intervention.
  * instead of returning HTML (for web browsers to render) it returns data (for other apps to use!) Such a server is often said to be delivering a *web service* or *web API*.
  * This brings the notion of modularity, isolation, information hiding all the way up to the level of full servers. And creating an application can now become the stringing together of web services, each of which might be delivered by a different company (think Amazon, Heroku, Apple, IBM)

#### What is Sintra?
* A ruby library
* Easiest way to create a simple web server
* Much smaller and easy to understand than rails (also less powerful)

#### Components of a Sinatra app
* Single main ruby program
* Routing
  * One method for each "route"
  * Rendering of Views
  * Nice pattern matching to generalize similar routes
  * At the end of the method, either render html, json, or redirect
  * Each of the route methods are "kind of like" a controller
* Data
  * Sinatra doesn't do anything special about working with the database
  * Whatever database access you prefer will work
  * Our examples use ActiveRecrord as a library to interface with the database
  * But there are other ones that work just as well
  * Typical design
    * encapsulates the data access in a class
    * one class for each table or entity
    * often referred to as a model class
* Views
  * Erb is a very common templating language
  * Look at <%= link_to_topic :erb_crib %>
  * They are what is generated at the end of the route method
  * In addition to erb there are tons of others
  * What they have in common: they all generate data (in the end) that is returned as the result of an HTTP request

#### Walk through some code
* [Sinatra Intro](http://www.sinatrarb.com/intro.html)
* [Simple Dataase Driven Website with Heroku](https://samuelstern.wordpress.com/2012/11/28/making-a-simple-database-driven-website-with-sinatra-and-heroku/)
* [SOTL-simple-service](https://github.com/pitosalas/sotl-user-service)

#### Sinatra References
* The readme of Sinatra is a great resource: [Sinatra Readme](http://www.sinatrarb.com/intro.html)
* A good basic book on sinatra is: [Sinatra Up and Running](http://www.amazon.com/Sinatra-Up-Running-Alan-Harris/dp/1449304230)

##### Gems
* [Shotgun Gem](https://github.com/rtomayko/shotgun)
* [Foreman Gem](https://github.com/ddollar/foreman)
* [ReRun Gem](https://github.com/alexch/rerun)
* [Scale Testing Choices](http://blazemeter.com/blog/open-source-load-testing-tools-which-one-should-you-use)
