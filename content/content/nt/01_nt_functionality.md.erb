---
title: nano Twitter Functionality
---
#### Functionality

* NanoTwitter (nT) is a baby version of Twitter designed as a platform for experimentation with scaling issues.
* Note that all the URLs, both for the User Interface and for the Web Services API will attempt to follow REST design principles as far as possible.

#### nT Functionality
* Users:
  * can register for an account by supplying an email a name and a password
  * are never deleted
  * are assigned a numeric id (the record id)
* Logged in users
  * Can follow and unfollow other registered users
  * Can tweet
  * Can see the flow of the last n tweets by the users that they have followed
* Non-logged in users
  * See the flow of the last n tweets by any user
* Tweets
  * Consist of
    * a 140 characters of text
    * a date-time of creation
    * Anything else you want to add to make it more impressive
  * Belong to one user
  * Can never be deleted

#### nT Web Services (REST) API
* All paths start with /api/v1
* /tweets/23 - return tweet with id
* /users/23 - return user information for user 23
* /tweets/recent - return the recent n tweets
* /users/23/tweets - return the users recent tweets
* You need to figure out the other ones. The objective is that someone can write, for example, an iPhone nanoTwitter client that would use this API to implement the functionality.

* Values as JSON, as example:
  * Tweet:
`{  "id": 123,
    "text": foobar,
    "created": jan-11-2015
}`
  * User: `{"id": 12, "email": xu@nanotwitter.org}`
  * List of tweets: `[<tweet>, <tweet>,...]`
  * Follow list: `["user_id": 22, "user_id": 23, ...]`



#### nT User Interface
* Basic bootstrappy html/css/javascript interface
* Clean but doesn't have to be fancy

##### Routes
* Non-logged-in root page (/)
  * List of the most recent 50 tweets from any user, each with link to tweeter's page
  * Login link
* Logged-in root page (/)
  * Maps to /user/1234 when user 1234 is logged in
* Specific user's page (/user/1234)
  * If this is logged in users own page
    * Equiv to logged in root
    * Ability to tweet (i.e. equiv to /)
  * If this is not logged in users own page, but a user is logged in
    * Button to follow that user (available only if logged in)
  * If no one is logged in
    * Display login link
  * In all cases, also:
    * Top 50 tweets of users followed by logged in user
    * User's profile info
    * Link to list of users followed by this user. Link text is a count.
    * Link to list of tweets made by this user. Link text is a count.
    * Link to list of users following this user. Link text is a count.
    * Registration
      * Display the user registration page (/user/register)
      * Display user login prompt, and check for correct password (/login)
      * Logout (/logout)

#### Test Interface
The Test Interface essentially is a set of URLs which invoke special functionality that allows your nanoTwitter to be tested from a browser, and is the foundation of the scalability testing we will be doing.

##### Accessing the following URLs invokes the Test Interface:

<%= callout("NB", %( There is one special user called "testuser@nanotwitter.org". We refer to that user as the TestUser.)) %>

* /test/reset/all
  * If needed deletes all users, tweets, follows
  * Recreates TestUser
  * Example: `test/reset/all`
* /test/reset/testuser
  * Deletes and recreates TestUser, including all his tweets, follows, and removes him from any other users' follow list.
  * Example: `/test/reset/testuser`
* /test/status
  * One page "report":
    * How many users, follows, and tweets are there
    * What is the TestUser's id
  * Example: `/test/status`
* /test/users/users/create?count=u&tweets=c
  * create `u` (integer) fake Users using faker. Defaults to 1.
  * each of those users gets `c` (integer) fake tweets. Defaults to zero.
  * Example: `/test/users/create?count=100&tweets=5`
* /test/user/u/tweets?count=t
  * user `u` generates `t`(integer) new fake tweets
  * if u="testuser" then this refers to the TestUser
  * Example: `/test/user/testuser/tweets?tweets=100`
* /test/user/u/follow?count=n
  * `n` (integer) randomly selected users follow user `u` (integer)
  * if u="testuser" then this refers to the TestUser
  * Example: `/test/user/22/follow?count=10`

#### nanoTwitter Scalability Test Protocol

Here's how testing of scaling will be done with loader.io. You need to make sure that your version of nanoTwitter performs as well as possible in these scenarios!

##### Setup

Before we can run a standardized test, we want to get each server to a known state we do the following commands directly from a browser.

* `/test/reset/all` - Delete everything and recreate testuser
* `/test/status` - See that the state is what you expect
* `/test/users/create?count=u&tweets=10` - create "u" new users, 10 tweets each
* `/test/user/testuser/tweets?count=t` - have testuser tweet "t" times
* `/test/user/testuser/follow?count=f` - have f users follow testuser

##### Pattern

Ok, now the server is in a known state. Next we want to do three distinct load tests

1. `/` - user tries to simply load up the home page (non-logged in)
2. `/user/testuser` - specifically load "testusers" home page
3. `/user/testuser/tweet` (POST) - have testuser create one tweet

##### Test runs

* Test case 1: u = 100, t = 500, f = 30
* Test case 2: u = 500, t = 500, f = 100
* Test case 3: u = 3000, t = 2000, f = 1000

##### Loader.io Setup for test
* Create a test case for each of the cases you want to test
  * Run 1 minute tests and play with the number of users to see what happens when you try to reach the limits indicated in the test runs
  * Use the "Maintain Client Load" test for pattern 1 and 2, and "Clients per test" for pattern 3
  * Enter each of the three urls above for three different test at least
  * Make sure you /test/reset between each test
* Collect data for a final report
