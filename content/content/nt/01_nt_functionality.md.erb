---
title: nano Twitter Functionality
---
#### Functionality

* NanoTwitter (nT) is a baby version of Twitter designed as a platform for experimentation with scaling issues.
* Note that all the URLs, both for the User Interface and for the Web Services API will attempt to follow REST design principles as far as possible.

#### nT Functionality
* Users:
  * can register for an account by supplying an email a name and a password
  * are never deleted
* Logged in users
  * Can follow and unfollow other registered users
  * Can tweet
  * Can see the flow of the last n tweets by the users that they have followed
* Non-logged in users
  * See the flow of the last n tweets by any user
* Tweets
  * Consist of
    * a 140 characters of text
    * a date-time of creation
    * Anything else you want to add to make it more impressive
  * Belong to one user
  * Can never be deleted
* REST Api is provided
  * Retrieve the firehose of all tweets by all users
  * Retrieve the firehose for one specific user

#### nT Authentication
* First just fake authentication
  * Build in (through seed data and Faker) a series of fake users
  * Make it easy to rebuild the database with a set collection of users.
  * Add the following two urls
    * log in user :x (/login/:x)
    * log out current user (/logout)
* Later in the term, as time permits implement more real authentication.
  * Users can register for an account by supplying an email a name and a password
  * Users are never deleted
  * Add the following urls
    * Display the user registration page (/user/register)
    * Display user login prompt, and check for correct password (/login)
    * Logout (/logout)

#### nT User Interface
* Very basic bootstrappy html interface
* Non-logged-in root page (/)
  * List of the most recent 50 tweets from any user, with link to tweeter's page
* Logged-in root page (/)
  * Exactly the same as /user/1234 when user 1234 is logged in
* Specific user's page (/user/name or /user/1234)
  * If this is logged in users own page
    * Equiv to logged in root
    * ability to tweet (i.e. equiv to /)
  * If this is not logged in users own page, but user is logged in
    * Button to follow that user (available only if logged in)
  * In all cases, also:
    * Top 50 tweets of followed users
    * User's profile
    * Link to list of users followed
    * Link to list of tweets made by this user

#### nT Web Services API
* REST-y API
  * All paths start with /api/v1
  * /tweets/23 - return tweet with id
  * /users/23 - return user information for user 23
  * /tweets/recent - return the recent n tweets
  * /users/23/tweets - return the users recent tweets
  * You need to figure out the other ones. The objective is that someone can write, for example, an iPhone nanoTwitter client that would use this API to implement the functionality.

* Values as JSON, as example:
  * Tweet:
`{  "id": 123,
    "text": foobar,
    "created": jan-11-2015
}`
  * User: `{"id": name": Pito Salas}`
  * List of tweets: `[<tweet>, <tweet>,...]`
  * Follow list: `["user_id": 22, "user_id": 23, ...]`

#### Test Interface
* /test/reset/all
  * If needed deletes all users, tweets, follows
  * if needed creates a new test user called `testuser`
* /test/reset/testuser
  * if needed creates a new test user called `testuser`
  * if needed deletes all tweets that the `testuser` ever created
  * if needed deletes all follows of the `testuser`
* /test/status
  * One page "report":
    * How many users, follows, and tweets are there
    * Is there a testuser and what is it's user_id
* /test/seed/n
  * create `n` (integer) fake Users using faker
* /test/tweets/n
  * user `testuser` genereates `n` (integer) new fake tweets
* /test/follow/n
  * `n` (integer) randomly selected users follow user `testUser`
* /test/tweet/userid
  * User `userid` (can be a number or an identifier) makes a tweet with fake information generated on the fly

#### nanoTwitter Scalability Test Protocol

Here's how testing of scaling will be done with loader.io. You need to make sure that your version of nanoTwitter performs as well as possible in these scenarios!

##### Setup

Before we can run a standardized test, we want to get each server to a known state we do the following commands directly from a browser.

* /test/reset/all - Delete everything and recreate testuser
* /test/status - See that the state is what you expect
* /test/seed/u - create "u" new users
* /test/tweets/t - have testuser tweet "t" times
* /test/follow/f - have f users follow testuser

##### Pattern

Ok, now the server is in a known state. Next we want to do three distinct load tests

1. / - user tries to simply load up the home page (non-logged in)
2. /user/testuser - specifically load "testusers" home page
3. /user/testuser/tweet (POST) - have testuser create one tweet

##### Test runs

* Test case 1: u = 100, t = 500, f = 30
* Test case 2: u = 500, t = 500, f = 100
* Test case 3: u = 3000, t = 2000, f = 1000

##### Loader.io Setup for test
* Create a test case for each of the cases you want to test
  * Run 1 minute tests and play with the number of users to see what happens when you try to reach the limits indicated in the test runs
  * Use the "Maintain Client Load" test for pattern 1 and 2, and "Clients per test" for pattern 3
  * Enter each of the three urls above for three different test at least
  * Make sure you /test/reset between each test
* Collect data for a final report
